/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package MyApp;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;


//import org.apache.logging.log4j.LogManager;
//import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

//git addimport java.security.GeneralSecurityException;
import java.util.ArrayList;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        //Logger logger = LogManager.getLogger(App.class);
        //logger.error("hello world");

        //int port = Integer.parseInt(System.getenv("PORT"));
        //port(port);
        
        port(getHerokuAssignedPort());
        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
        //System.out.println(req.queryParams("input1"));
        //System.out.println(req.queryParams("input2"));

        String input1 = req.queryParams("input1");
        java.util.Scanner sc1 = new java.util.Scanner(input1);
        sc1.useDelimiter("[;\r\n]+");
        java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
        while (sc1.hasNext())
        {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
        }
        sc1.close();
        System.out.println(inputList);

        String input2 = req.queryParams("input2").replaceAll("\\s","");
        int input2AsInt = Integer.parseInt(input2);

        String input3 = req.queryParams("input3").replaceAll("\\s","");
        int input3AsInt = Integer.parseInt(input3);

        boolean result = App.searchInRemainderedArray(inputList, input2AsInt, input3AsInt);

        Map<String, Boolean> map = new HashMap<String, Boolean>();
        map.put("result", result);
        return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());

        get("/compute",
        (rq, rs) -> {
        Map<String, String> map = new HashMap<String, String>();
        map.put("result", "not computed yet!");
        return new ModelAndView(map, "compute.mustache"); 
        },
        new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }

    public static boolean searchInRemainderedArray(ArrayList<Integer> arr, int k, int number) {

        boolean control = false;
        ArrayList<Integer> newArray = new ArrayList<>();

        if(number < 0)
            return false;

        if(k == 0)
            return false;

        if(arr.size() > 10 || arr.size() == 0)
            return false;
        
        for(int i = 0; i < arr.size(); i++) {
            Integer x = arr.get(i);
            if(x == null)
                return false;
            newArray.add(i,arr.get(i) % k);
        }

        for(int l = 0; l < newArray.size(); l++) {
            if(newArray.get(l) == number)
                control = true;
        }
        return control;
    }
    
}
